// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WEB_API.Data;

namespace WEB_API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221116124453_Initial_1.1")]
    partial class Initial_11
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.29")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Value")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("WEB_API.Models.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AccountHolder_Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<double>("AccountNo")
                        .HasColumnType("double");

                    b.Property<double>("Balance")
                        .HasColumnType("double");

                    b.Property<string>("Branch_Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Customer_ID")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("EXTRA1")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("EXTRA2")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("EXTRA3")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("EXTRA4")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("Entry_Date")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("GL_CODE")
                        .HasColumnType("int");

                    b.Property<string>("GL_NAME")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Mobile_No")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("WEB_API.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("WEB_API.Models.Cbill", b =>
                {
                    b.Property<int>("CbillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("AadharCardNo")
                        .HasColumnType("double");

                    b.Property<string>("AccountName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<double>("Amount")
                        .HasColumnType("double");

                    b.Property<string>("BranchCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("BranchName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ElectionCardNo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Extra1")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Extra2")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Extra3")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Extra4")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("GLNAME")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<double>("MobileNo")
                        .HasColumnType("double");

                    b.Property<string>("PancardNo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("SocietyName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("CbillId");

                    b.ToTable("Cbills");
                });

            modelBuilder.Entity("WEB_API.Models.Deposit", b =>
                {
                    b.Property<int>("DepositId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AccountHolder_Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<double>("AccountNo")
                        .HasColumnType("double");

                    b.Property<double>("Balance")
                        .HasColumnType("double");

                    b.Property<string>("Branch_Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CHEQUE_NO")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<double>("Credit")
                        .HasColumnType("double");

                    b.Property<string>("Customer_ID")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<double>("Debit")
                        .HasColumnType("double");

                    b.Property<DateTime?>("Entry_Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Extra_1")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Extra_2")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Extra_3")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Extra_4")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("GL_CODE")
                        .HasColumnType("int");

                    b.Property<string>("GL_NAME")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Mobile_No")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PARTICULAR")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("SOURCE")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("Tdate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("DepositId");

                    b.ToTable("Deposits");
                });

            modelBuilder.Entity("WEB_API.Models.Loan", b =>
                {
                    b.Property<int>("LoanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AccountHolder_Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<double>("AccountNo")
                        .HasColumnType("double");

                    b.Property<double>("Balance")
                        .HasColumnType("double");

                    b.Property<string>("Branch_Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CHEQUE_NO")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Customer_ID")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("Entry_Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Extra_1")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Extra_2")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Extra_3")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Extra_4")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("GL_CODE")
                        .HasColumnType("int");

                    b.Property<string>("GL_NAME")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<double>("Interest")
                        .HasColumnType("double");

                    b.Property<string>("Mobile_No")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<double>("Other")
                        .HasColumnType("double");

                    b.Property<string>("PARTICULAR")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<double>("Penalty")
                        .HasColumnType("double");

                    b.Property<double>("Principal")
                        .HasColumnType("double");

                    b.Property<string>("SOURCE")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("Tdate")
                        .HasColumnType("datetime(6)");

                    b.Property<double>("Total")
                        .HasColumnType("double");

                    b.HasKey("LoanId");

                    b.ToTable("Loans");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("WEB_API.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("WEB_API.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WEB_API.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("WEB_API.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
